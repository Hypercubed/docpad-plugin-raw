// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var eachr, ncp, path, raw, _ref;
    eachr = require('eachr');
    ncp = require('ncp');
    path = require('path');
    return raw = (function(_super) {
      __extends(raw, _super);

      function raw() {
        _ref = raw.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      raw.prototype.name = 'raw';

      raw.prototype.writeAfter = function(opts, next) {
        var config, docpad, outPath, srcPath, _base;
        docpad = this.docpad;
        config = docpad.getConfig();
        outPath = path.normalize("" + config.outPath);
        srcPath = path.normalize("" + config.srcPath);
        config.plugins || (config.plugins = {});
        (_base = config.plugins).raw || (_base.raw = {});
        if (Object.keys(config.plugins.raw).length === 0) {
          config.plugins.raw["default"] = {};
          config.plugins.raw["default"].src = 'raw';
        }
        return eachr(config.plugins.raw, function(target, key) {
          var options, src;
          src = path.join(srcPath, target.src);
          docpad.log("info", "Copying " + key);
          options = (target.options != null) && typeof target.options === 'object' ? target.options : {};
          docpad.log("debug", "raw plugin info... out: " + outPath + ", src: " + src + ", options: " + (JSON.stringify(options)));
          return ncp(src, outPath, options, function(err) {
            if (err) {
              return next(err);
            }
            docpad.log("info", "Done copying " + key);
            return next();
          });
        });
      };

      return raw;

    })(BasePlugin);
  };

}).call(this);
