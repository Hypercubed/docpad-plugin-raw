// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var balUtil, eachr, path, raw, _ref;

    eachr = require('eachr');
    path = require('path');
    balUtil = require('bal-util');
    return raw = (function(_super) {
      __extends(raw, _super);

      function raw() {
        _ref = raw.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      raw.prototype.name = 'raw';

      raw.prototype.writeAfter = function(opts, next) {
        var CYGWIN, WINDOWS, XCOPY, config, docpad, outPath, srcPath, _base, _base1;

        docpad = this.docpad;
        config = docpad.getConfig();
        WINDOWS = /win/.test(process.platform);
        CYGWIN = /cygwin/.test(process.env.PATH);
        XCOPY = WINDOWS && !CYGWIN;
        outPath = path.normalize("" + config.outPath);
        srcPath = path.normalize("" + config.srcPath);
        config.plugins || (config.plugins = {});
        (_base = config.plugins).raw || (_base.raw = {});
        (_base1 = config.plugins.raw).commands || (_base1.commands = (XCOPY ? {
          raw: ['xcopy', '/e', 'src\\raw\\*', 'out\\']
        } : {
          raw: ['cp', '-Rnl', 'src/raw/*', 'out/']
        }));
        return eachr(config.plugins.raw.commands, function(command, key) {
          command = command.map(function(part) {
            return part.replace(/^out/, outPath).replace(/^src/, srcPath);
          });
          docpad.log('info', 'Copying ' + key + ' directory [' + command.join(' ') + ']');
          return balUtil.spawn(command, {
            output: false
          }, function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', 'Copied raw directory');
            return next();
          });
        });
      };

      return raw;

    })(BasePlugin);
  };

}).call(this);
